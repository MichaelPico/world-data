@using World.Data.Web.Components.Navbar
@using static World.Data.Web.Shared.NavbarCascadingState

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">@NavbarState.Title</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            @if (NavbarState.Inputs is not null)
            {
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    @foreach (var input in this.NavbarState.Inputs)
                    {
                        if (input is NavbarButton)
                        {
                            string cssClass = input.Disable ? "nav-link disabled" : "nav-link";
                            cssClass += ((NavbarButton)input).Active ? " active" : string.Empty;
                            string route = ((NavbarButton)input).Route;

                            <li class="nav-item">
                                <a class="@cssClass" aria-current="page" href="@route">@input.Name</a>
                            </li>
                        }
                        else if (input is NavbarSelect)
                        {
                            string cssClass = input.Disable ? "nav-link dropdown-toggle disabled" : "nav-link dropdown-toggle";

                            <li class="nav-item dropdown">
                                <a class="@cssClass" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    @input.Name
                                </a>
                                <ul class="dropdown-menu">
                                    @foreach (NavbarButton button in ((NavbarSelect)input).Buttons)
                                    {
                                        string route = button.Route;
                                        string buttonCssClass = button.Disable ? "dropdown-item disabled" : "dropdown-item";
                                        <li><a class="@buttonCssClass" href="@route">@button.Name</a></li>
                                    }
                                </ul>
                            </li>
                        }
                    }
                </ul>
                @if (NavbarState.Inputs.Any(input => input is NavbarSearch))
                {
                    NavbarSearch search = (NavbarSearch)NavbarState.Inputs.FirstOrDefault(input => input is NavbarSearch);

                    <form class="d-flex" role="search">
                        <input class="form-control me-2" type="search" placeholder="@search.Name" aria-label="Search">
                        <button class="btn btn-outline-success" type="submit">Search</button>
                    </form>
                }
            }
        </div>
    </div>
</nav>

@code {
    [Parameter]
    public NavbarCascadingState NavbarState { get; set; } = new();
}
